import React from 'react';
import PropTypes from 'prop-types';
import {MCCard} from '../styled/View';
import {H4} from '../styled/Text';
import {withTranslation} from 'react-i18next';
import {connect} from 'react-redux';
import {MCButton} from '../styled/Button';

const VulnerabilityPickerData = ['not', 'somewhat', 'very', 'most'];

class MCVulnerabilityPicker extends React.PureComponent {
  static propTypes = {
    onSelect: PropTypes.func.isRequired,
    defaultIndex: PropTypes.number,
  };

  static defaultProps = {
    defaultIndex: 1,
  };

  constructor(props) {
    super(props);
    this.state = {
      selectedIndex: props.defaultIndex,
    };
  }

  onSelect = index => {
    this.setState({selectedIndex: index});
    this.props.onSelect(index);
  };

  render() {
    const {selectedIndex} = this.state;
    const {t, theme} = this.props;
    return (
      <MCCard row>
        {VulnerabilityPickerData.map((how, index) => {
          const selected = selectedIndex === index + 1;
          return (
            <MCButton
              key={index}
              style={{
                flex: 1,
                backgroundColor: selected ? theme.colors.text : 'transparent',
              }}
              align="center"
              onPress={() => this.onSelect(index + 1)}>
              <H4
                color={selected ? theme.colors.background : theme.colors.text}>
                {t(`vulnerability_${how}`)}
              </H4>
              <H4
                color={selected ? theme.colors.background : theme.colors.text}>
                {index + 1}
              </H4>
            </MCButton>
          );
        })}
      </MCCard>
    );
  }
}

const mapStateToProps = state => ({
  theme: state.routerReducer.theme,
});

export default withTranslation()(
  connect(
    mapStateToProps,
    undefined,
  )(MCVulnerabilityPicker),
);
